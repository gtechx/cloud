//first, login with account,appname and zonename
//server will return all appdataid in the zone of app
//client need to use one of the appdataid to enter chat.

//before receive chat server chat msg, client need send ready msg to server.
//账号登录的时候发送账号、密码,返回登录成功的token
//登录聊天有两种情况
//1.聊天APP应用，没有分区
//2.游戏带分区聊天应用
//登录聊天的时候需要发送账号、密码，返回appdataidlist
//进入聊天发送appdataid, 服务器根据appdataid创建session
//客户端发送可以接受消息命令，服务器设置玩家在线

关于快速向全服所有user发送消息：
1.首先每个服务器都要保存当前所登录的app和分区内所有的用户id和服务器信息，那么怎样得到这些信息呢？
首先我们知道，每个服务器会有
a.当一个用户登录时，需要向redis的key queue:server列表中注册上线信息，每个服务器会检测自己的该key，并添加到自己的在线用户列表中。
b.同理，当一个用户离线时，会有一个queue:server key注册离线信息。
c.redis会维护一个所有在线用户的id集合。新启动的服务器可以读取这里面的所有id并存储起来。

2.发送广播消息：
由和游戏服务器交互的服务器接收，然后添加zone id并存储到redis的 message:server列表，各服务器自己检测并广播给服务器相关的用户。
注意：需要zone id.

3.服务器启动流程
a.读取配置文件
b.初始化数据库
c.启动服务器

4.游戏用户登录流程
a.登录游戏服务器，游戏服务器从token服务器获取token，返回给客户端
b.客户端使用token登录chat服务器
b.验证成功以后，读取用户房间列表及房间用户信息，并添加到服务器房间列表中。
注意：多线程问题？加入所有操作都在服务器帧循环中做，就不存在多线程问题了。

5.服务器帧流程
a.掉线用户sess移除
b.新用户sess创建
c.服务器消息队列处理，最多处理每帧10个。如：新上线用户添加（包括其他服务器的）、房间用户添加/删除
d.用户请求处理

6.